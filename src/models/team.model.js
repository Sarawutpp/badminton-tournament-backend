const mongoose = require('mongoose');
const { Schema } = mongoose;

const teamSchema = new Schema(
  {
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
    teamCode: { type: String, unique: true, index: true }, // ‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á/‡∏ô‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    teamName: { type: String, required: true, trim: true }, // üëà ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏° (‡πÉ‡∏´‡∏°‡πà)
    competitionType: { type: String, enum: ['Singles', 'Doubles'], required: true },
    handLevel: { type: String, required: true }, // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏°‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô N/NB/Baby/BG-/Mix

    // ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    players: [{ type: Schema.Types.ObjectId, ref: 'Player', required: true }],

    // ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
    managerName: { type: String },
    phone: { type: String },
    lineId: { type: String },

    // ‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
    matchesPlayed: { type: Number, default: 0 },
    wins: { type: Number, default: 0 },
    losses: { type: Number, default: 0 },
    points: { type: Number, default: 0 },
    scoreDifference: { type: Number, default: 0 },
  },
  { timestamps: true }
);

module.exports = mongoose.model('Team', teamSchema);
